AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation setup for MLProjectPipeline and MLCloudFormationPipeline with proper sequencing.

Parameters:
  GitHubOwner:
    Type: String
    Default: rishichauhan193
  GitHubRepo:
    Type: String
    Default: ML-Project
  GitHubBranch:
    Type: String
    Default: main
  GitHubOAuthToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /github/oauth/token

Resources:
  # **S3 Bucket for Lambda Artifacts**
  LambdaArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "ml-lambda-artifacts-${AWS::AccountId}"

  # **IAM Role for MLProjectPipeline**
  MLProjectPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MLProjectPipelinePermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::ml-lambda-artifacts-${AWS::AccountId}/*"

  # **IAM Role for Lambda Execution**
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # **MLProjectPipeline (Builds and uploads Lambda package)**
  MLProjectPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MLProjectPipeline
      RoleArn: !GetAtt MLProjectPipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref LambdaArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceFetch
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: BuildLambda
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: MLProjectCodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: UploadToS3
          Actions:
            - Name: UploadArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Ref LambdaArtifactBucket
                Extract: false
                ObjectKey: lambda_package.zip
              InputArtifacts:
                - Name: BuildArtifact

  # **IAM Role for MLCloudFormationPipeline**
  MLCloudFormationPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MLCloudFormationPipelinePermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::ml-lambda-artifacts-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                Resource: !GetAtt MLProcessingLambda.Arn

  # **Lambda Function that will be deployed**
  MLProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MLProcessingLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: lambda_package.zip

  # **CodePipeline for Lambda Deployment**
  MLCloudFormationPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MLCloudFormationPipeline
      RoleArn: !GetAtt MLCloudFormationPipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref LambdaArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: FetchArtifact
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref LambdaArtifactBucket
                S3ObjectKey: lambda_package.zip
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: DeployLambda
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref MLProcessingLambda
                S3Bucket: !Ref LambdaArtifactBucket
                S3Key: lambda_package.zip

  # **EventBridge Rule: Ensure MLCloudFormationPipeline runs only after MLProjectPipeline succeeds**
  PipelineTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: MLProjectPipelineSuccessTrigger
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - SUCCEEDED
          pipeline:
            - "MLProjectPipeline"
      Targets:
        - Arn: !GetAtt PipelineTriggerLambda.Arn
          Id: "MLPipelineTriggerTarget"

  # **Lambda Function: Start MLCloudFormationPipeline only after MLProjectPipeline succeeds**
  PipelineTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MLCloudFormationTrigger
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              client = boto3.client('codepipeline')
              response = client.start_pipeline_execution(
                  name='MLCloudFormationPipeline'
              )
              return {
                  "statusCode": 200,
                  "body": json.dumps({"message": "Pipeline triggered"})
              }

  # **Permission for EventBridge to invoke the Lambda**
  EventBridgeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PipelineTriggerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com

Outputs:
  MLProcessingLambdaARN:
    Description: "ARN of the deployed Lambda function"
    Value: !GetAtt MLProcessingLambda.Arn
  MLProjectPipelineName:
    Description: "Name of MLProjectPipeline"
    Value: !Ref MLProjectPipeline
  MLCloudFormationPipelineName:
    Description: "Name of MLCloudFormationPipeline"
    Value: !Ref MLCloudFormationPipeline
