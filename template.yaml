AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation setup for MLCloudFormationPipeline and event-based triggering.

Resources:
  # S3 Bucket for Lambda Package
  LambdaArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "ml-lambda-artifacts-${AWS::AccountId}"

  # IAM Role for CodePipeline
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MLCloudFormationPipelineRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::ml-lambda-artifacts-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                Resource: !GetAtt MLProcessingLambda.Arn

  # Lambda Function that will be deployed
  MLProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MLProcessingLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: lambda_package.zip

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # CodePipeline for Lambda Deployment
  MLCloudFormationPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MLCloudFormationPipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref LambdaArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: FetchArtifact
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref LambdaArtifactBucket
                S3ObjectKey: lambda_package.zip
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: DeployLambda
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref MLProcessingLambda
                S3Bucket: !Ref LambdaArtifactBucket
                S3Key: lambda_package.zip

  # EventBridge Rule to trigger CodePipeline
  PipelineTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: MLProjectPipelineSuccessTrigger
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - SUCCEEDED
          pipeline:
            - "MLProjectPipeline"
      Targets:
        - Arn: !GetAtt PipelineTriggerLambda.Arn
          Id: "MLPipelineTriggerTarget"

  # Lambda Function to start CodePipeline when MLProjectPipeline succeeds
  PipelineTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MLCloudFormationTrigger
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              client = boto3.client('codepipeline')
              response = client.start_pipeline_execution(
                  name='MLCloudFormationPipeline'
              )
              return {
                  "statusCode": 200,
                  "body": json.dumps({"message": "Pipeline triggered"})
              }

  # Permission for EventBridge to invoke the Lambda
  EventBridgeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PipelineTriggerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
