AWSTemplateFormatVersion: '2010-09-09'
Description: Single-pipeline CloudFormation setup for ML Lambda deployment.

Parameters:
  GitHubOwner:
    Type: String
    Default: rishichauhan193
  GitHubRepo:
    Type: String
    Default: ML-Project
  GitHubBranch:
    Type: String
    Default: main
  GitHubOAuthToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /github/oauth/token

Resources:

  LambdaArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "ml-project-artifacts-${AWS::AccountId}"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  MLProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MLProcessingLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Placeholder"}

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MLProcessingLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/mlprocess"

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MLProcessingApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: mlprocess

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt MLProcessingLambda.Arn }

  MLProjectPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MLProjectPipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::ml-project-artifacts-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/MLProjectCodeBuild
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                Resource: !GetAtt MLProcessingLambda.Arn

  MLProjectPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MLProjectPipeline
      RoleArn: !GetAtt MLProjectPipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref LambdaArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceFetch
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: BuildLambda
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: MLProjectCodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
          - Name: DeployLambda
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              ActionMode: REPLACE_ON_FAILURE
              StackName: LambdaDeploymentStack
              Capabilities: CAPABILITY_NAMED_IAM
              TemplatePath: BuildArtifact::lambda-cfn.yaml
            InputArtifacts:
              - Name: BuildArtifact


Outputs:
  ApiEndpoint:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/mlprocess"
  MLProcessingLambdaARN:
    Value: !GetAtt MLProcessingLambda.Arn
  MLProjectPipelineName:
    Value: !Ref MLProjectPipeline
